# import sys
# import asyncio
# import aiohttp
# from PyQt6.QtWidgets import (
#     QApplication, QWidget, QVBoxLayout, QPushButton,
#     QTextEdit, QLineEdit, QLabel
# )
# from PyQt6.QtCore import QEvent
# from qasync import QEventLoop, asyncSlot
#
# class RequestApp(QWidget):
#     def __init__(self):
#         super().__init__()
#         self.setWindowTitle("GET –∏ POST —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º")
#         self.setGeometry(300, 300, 600, 500)
#         self.running = False  # —Ñ–ª–∞–≥ –¥–ª—è —Ü–∏–∫–ª–∞
#
#         layout = QVBoxLayout()
#
#         # üîπ –ü–æ–ª—è –¥–ª—è POST-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
#         self.name_input = QLineEdit()
#         self.name_input.setPlaceholderText("–ò–º—è")
#
#         self.age_input = QLineEdit()
#         self.age_input.setPlaceholderText("–í–æ–∑—Ä–∞—Å—Ç")
#
#         layout.addWidget(QLabel("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è POST-–∑–∞–ø—Ä–æ—Å–∞:"))
#         layout.addWidget(self.name_input)
#         layout.addWidget(self.age_input)
#
#         # üîπ –ö–Ω–æ–ø–∫–∏ GET –∏ POST
#         self.get_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å GET-–∑–∞–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é")
#         self.post_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å POST-–∑–∞–ø—Ä–æ—Å")
#
#         layout.addWidget(self.get_button)
#         layout.addWidget(self.post_button)
#
#         # üîπ –ü–æ–ª–µ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
#         self.result_area = QTextEdit()
#         self.result_area.setReadOnly(True)
#         layout.addWidget(QLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:"))
#         layout.addWidget(self.result_area)
#
#         self.setLayout(layout)
#
#         # üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
#         self.get_button.clicked.connect(self.send_get)
#         self.post_button.clicked.connect(self.send_post)
#
#     def showEvent(self, event: QEvent):
#         super().showEvent(event)
#         if not self.running:
#             self.running = True
#             asyncio.get_event_loop().create_task(self.auto_update())
#             # TODO: cancel it if close widnow
#
#     async def auto_update(self):
#         while self.running:
#             await self.send_get()
#             await asyncio.sleep(1)
#
#     @asyncSlot()
#     async def send_get(self):
#         url = "https://httpbin.org/get"
#         try:
#             async with aiohttp.ClientSession() as session:
#                 async with session.get(url) as response:
#                     data = await response.text()
#                     self.result_area.setText(data)
#         except Exception as e:
#             self.result_area.setText(f"–û—à–∏–±–∫–∞ GET: {e}")
#
#     @asyncSlot()
#     async def send_post(self):
#         url = "https://httpbin.org/post"
#         payload = {
#             "name": self.name_input.text(),
#             "age": self.age_input.text()
#         }
#         try:
#             async with aiohttp.ClientSession() as session:
#                 async with session.post(url, json=payload) as response:
#                     data = await response.text()
#                     self.result_area.setText(data)
#         except Exception as e:
#             self.result_area.setText(f"–û—à–∏–±–∫–∞ POST: {e}")
#
# def main():
#     app = QApplication(sys.argv)
#     loop = QEventLoop(app)
#     asyncio.set_event_loop(loop)
#
#     window = RequestApp()
#     window.show()
#
#     with loop:
#         loop.run_forever()
#
# if __name__ == "__main__":
#     main()


import sys
import asyncio
import aiohttp
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QPushButton,
    QTextEdit, QLabel, QLineEdit
)
from PyQt6.QtCore import QEvent
from qasync import QEventLoop, asyncSlot

class AutoRequestApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ GET-–∑–∞–ø—Ä–æ—Å–∞")
        self.setGeometry(300, 300, 600, 400)
        self.running = False

        layout = QVBoxLayout()

        # üîπ –ü–æ–ª—è –¥–ª—è POST-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.name_input = QLineEdit()
        self.name_input.setPlaceholderText("–ò–º—è")

        self.age_input = QLineEdit()
        self.age_input.setPlaceholderText("–í–æ–∑—Ä–∞—Å—Ç")

        self.label = QLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç GET-–∑–∞–ø—Ä–æ—Å–∞:")
        self.result_area = QTextEdit()
        self.result_area.setReadOnly(True)

        layout.addWidget(QLabel("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è POST-–∑–∞–ø—Ä–æ—Å–∞:"))
        layout.addWidget(self.name_input)
        layout.addWidget(self.age_input)

        # üîπ –ö–Ω–æ–ø–∫–∏ GET –∏ POST
        self.get_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å GET-–∑–∞–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é")
        self.post_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å POST-–∑–∞–ø—Ä–æ—Å")

        layout.addWidget(self.get_button)
        layout.addWidget(self.post_button)

        self.exit_button = QPushButton("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

        layout.addWidget(self.label)
        layout.addWidget(self.result_area)
        layout.addWidget(self.exit_button)
        self.setLayout(layout)

        # üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.get_button.clicked.connect(self.send_get)
        self.post_button.clicked.connect(self.send_post)
        self.exit_button.clicked.connect(self.exit_app)

    def showEvent(self, event: QEvent):
        super().showEvent(event)
        if not self.running:
            self.running = True
            asyncio.get_event_loop().create_task(self.auto_update())
            # TODO: TODO: save task and cancel it on exit

    async def auto_update(self):
        while self.running:
            await self.send_get()
            await asyncio.sleep(1)

    @asyncSlot()
    async def send_get(self):
        url = "https://httpbin.org/get"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    data = await response.text()
                    self.result_area.setText(data)
        except Exception as e:
            self.result_area.setText(f"–û—à–∏–±–∫–∞: {e}")

    @asyncSlot()
    async def send_post(self):
        url = "https://httpbin.org/post"
        payload = {
            "name": self.name_input.text(),
            "age": self.age_input.text()
        }
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload) as response:
                    data = await response.text()
                    self.result_area.setText(data)
        except Exception as e:
            self.result_area.setText(f"–û—à–∏–±–∫–∞ POST: {e}")

    def exit_app(self):
        self.running = False  # –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–∏–∫–ª–∞
        QApplication.quit()   # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

def main():
    app = QApplication(sys.argv)
    loop = QEventLoop(app)
    asyncio.set_event_loop(loop)

    window = AutoRequestApp()
    window.show()

    with loop:
        loop.run_forever()

if __name__ == "__main__":
    main()

